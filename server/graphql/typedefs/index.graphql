type Query {
    productTypes: [ProductType]

    productType(id: String!): ProductType!

    products: [Product]

    product(id: String!): Product!

    varieties: [Variety]

    variety(id: String): Variety!

    varietiesByProdID(prodID: String!): [Variety]

    standingOrders: [StandingOrder]

    standingOrder(id: String!): StandingOrder!

    shipments: [Shipment]

    shipment(id: String!): Shipment!

    shipmentItems(shipmentID: String!): [Purchase]

    shippingMethods: [ShippingMethod]

    shippingMethod(id: String!): ShippingMethod!

    vendors: [Vendor]

    vendor(id: String!): Vendor!

    store(id: String!): Store!

    stores: [Store]

    event(id: String!): Event!

    events: [Event]

    eventItems(eventID: String!): [SoldItem]

    eventsItems: [SoldItem]

    shipmentsByDates(startDate: String!, endDate: String!): [Shipment]

    preBooks: [PreBook]

    preBook(id: String!): PreBook!

    preBookItems(preBookId: String!): [Purchase]
}

type Mutation {
    addProductType(productType: AddProductTypeInput): ProductType!

    addProduct(product: AddProductInput!): Product!

    addVariety(productID: String!, variety: AddVarietyInput!): Variety!

    addSOItem(standingOrderId: String!, item: AddIncomingItemInput!): StandingOrder!

    deleteSOItem(standingOrderId: String!, itemId: String!): StandingOrder

    addStandingOrder(standingOrder: AddStandingOrderInput!): StandingOrder!

    addShippingMethod(shippingMethod: AddShippingMethodInput!): ShippingMethod!

    addVendor(vendor: AddVendorInput!): Vendor!

    addStore(store: AddStoreInput!): Store!

    addEvent(event: AddEventInput): Event!

    addEventItem(eventID: String!, item: AddSoldItemInput): SoldItem!

    addPreBook(preBook: AddPreBookInput!): PreBook!

    addPreBookItem(preBookId: String!, item: AddIncomingItemInput): Purchase!


    # deleteEventItem(eventID: String!, itemID: String!): Event
}